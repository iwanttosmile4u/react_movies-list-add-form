{"version":3,"sources":["components/NewMovie/NewMovie.tsx","components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","App.tsx","index.tsx"],"names":["URLErrors","MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","imdbId","NewMovie","onAdd","useState","setTitle","hasTitleError","setHasTitleError","setDescription","setImgUrl","noError","hasImgUrlError","setHasImgUrlError","setImdbUrl","hasImdbUrlError","setHasImdbUrlError","setImdbId","hasImdbIdError","setHasImdbIdError","regex","onSubmit","event","preventDefault","empty","type","name","placeholder","value","onBlur","onChange","target","classnames","error","form__field","test","invalid","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccf245ac.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport './NewMovie.scss';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nenum URLErrors {\n  noError = '',\n  invalid = 'Wrong URL!',\n  empty = 'Please, enter some value',\n}\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [description, setDescription] = useState('');\n\n  const [imgUrl, setImgUrl] = useState('');\n  const [hasImgUrlError, setHasImgUrlError] = useState(URLErrors.noError);\n\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [hasImdbUrlError, setHasImdbUrlError] = useState(URLErrors.noError);\n\n  const [imdbId, setImdbId] = useState('');\n  const [hasImdbIdError, setHasImdbIdError] = useState(false);\n\n  // eslint-disable-next-line max-len\n  const regex = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n  const changeTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n  };\n\n  const validateTitle = () => {\n    const isInvalid = !title;\n\n    setHasTitleError(isInvalid);\n  };\n\n  const changeDescription = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setDescription(event.target.value);\n  };\n\n  const changeImgUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImgUrl(event.target.value);\n  };\n\n  const validateImgUrl = () => {\n    if (!imgUrl) {\n      setHasImgUrlError(URLErrors.empty);\n\n      return;\n    }\n\n    if (!regex.test(imgUrl)) {\n      setHasImgUrlError(URLErrors.invalid);\n\n      return;\n    }\n\n    setHasImgUrlError(URLErrors.noError);\n  };\n\n  const changeImdbUrl = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImdbUrl(event.target.value);\n  };\n\n  const validateImdbUrl = () => {\n    if (!imdbUrl) {\n      setHasImdbUrlError(URLErrors.empty);\n\n      return;\n    }\n\n    if (!regex.test(imdbUrl)) {\n      setHasImdbUrlError(URLErrors.invalid);\n\n      return;\n    }\n\n    setHasImdbUrlError(URLErrors.noError);\n  };\n\n  const changeImdbId = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setImdbId(event.target.value);\n  };\n\n  const validateImdbId = () => {\n    const isInvalid = !imdbId;\n\n    setHasImdbIdError(isInvalid);\n  };\n\n  const showErrors = () => {\n    setHasTitleError(!title);\n    setHasImgUrlError(URLErrors.empty);\n    setHasImdbUrlError(URLErrors.empty);\n    setHasImdbIdError(!imdbId);\n  };\n\n  const resetInputs = () => {\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setHasImgUrlError(URLErrors.noError);\n    setHasImdbUrlError(URLErrors.noError);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    showErrors();\n\n    if (title && imgUrl && imdbUrl && imdbId) {\n      onAdd({\n        title, description, imgUrl, imdbUrl, imdbId,\n      });\n      resetInputs();\n    }\n  };\n\n  return (\n    <>\n      <h3>Add movie</h3>\n      <form\n        onSubmit={handleSubmit}\n        className=\"form\"\n      >\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Enter the title\"\n          value={title}\n          onBlur={validateTitle}\n          onChange={changeTitle}\n          className={classnames({\n            error: hasTitleError,\n            form__field: true,\n          })}\n        />\n\n        {hasTitleError && (\n          <span className=\"error-text\">\n            Please, enter the title\n          </span>\n        )}\n\n        <textarea\n          name=\"description\"\n          placeholder=\"Enter the description\"\n          value={description}\n          onChange={changeDescription}\n          className=\"form__field\"\n        />\n\n        <input\n          type=\"text\"\n          name=\"imgUrl\"\n          placeholder=\"Image url\"\n          value={imgUrl}\n          onBlur={validateImgUrl}\n          onChange={changeImgUrl}\n          className={classnames({\n            error: hasImgUrlError,\n            form__field: true,\n          })}\n        />\n\n        <span className=\"error-text\">\n          {hasImgUrlError}\n        </span>\n\n        <input\n          type=\"text\"\n          name=\"imdbUrl\"\n          placeholder=\"IMDB url\"\n          value={imdbUrl}\n          onBlur={validateImdbUrl}\n          onChange={changeImdbUrl}\n          className={classnames({\n            error: hasImdbUrlError,\n            form__field: true,\n          })}\n        />\n\n        <span className=\"error-text\">\n          {hasImdbUrlError}\n        </span>\n\n        <input\n          type=\"text\"\n          name=\"imdbId\"\n          placeholder=\"IMDB id\"\n          value={imdbId}\n          onBlur={validateImdbId}\n          onChange={changeImdbId}\n          className={classnames({\n            error: hasImdbIdError,\n            form__field: true,\n          })}\n        />\n\n        {hasImdbIdError && (\n          <span className=\"error-text\">\n            Please, enter IMDB id!\n          </span>\n        )}\n\n        <button\n          type=\"submit\"\n          className=\"btn\"\n        >\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n","import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = Movie;\n\nexport const MovieCard: React.FC<Props> = ({\n  title, description, imgUrl, imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport const App: React.FC = () => {\n  const [movies, setMovies] = useState(moviesFromServer);\n\n  const addMovie = (movie: Movie) => {\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}